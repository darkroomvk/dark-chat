{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","src","App","useAuthState","user","theme","setTheme","console","log","localStorage","getItem","onLoad","style","display","setItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9dc65205.chunk.js","sourcesContent":["import React, {\n  // Component,\n  useRef,\n  useState,\n} from \"react\";\nimport \"./App.css\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/analytics\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\n// import Blank from \"./components/Blank\";\n\nfirebase.initializeApp({\n  // your config\n  apiKey: \"AIzaSyAbze8xO0Zi1DmK7BiHepfl7lDkRqU920w\",\n  authDomain: \"msgapp-d8d05.firebaseapp.com\",\n  projectId: \"msgapp-d8d05\",\n  storageBucket: \"msgapp-d8d05.appspot.com\",\n  messagingSenderId: \"171488458064\",\n  appId: \"1:171488458064:web:2e448e32b838b975662855\",\n  measurementId: \"G-P769XER0GK\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n  const [theme, setTheme] = useState(\"theme-light\");\n\n  function toggleTheme() {\n    if (theme === \"theme-dark\") {\n      setTheme(\"theme-light\");\n      localStorage.setItem(\"theme\", \"theme-light\");\n    } else {\n      setTheme(\"theme-dark\");\n      localStorage.setItem(\"theme\", \"theme-dark\");\n    }\n  }\n  function setLocalTheme() {\n    if (localStorage.getItem(\"theme\") === \"theme-dark\") {\n      setTheme(\"theme-dark\");\n    } else {\n      setTheme(\"theme-light\");\n    }\n  }\n  const icon1 = \"fa-home\";\n  console.log(localStorage.getItem(\"theme\"));\n\n  return (\n    <div id=\"App\" onLoad={setLocalTheme} className={`App ${theme}`}>\n      <header>\n        <h1 className=\"logo\">Dark Chat</h1>\n        <div style={{ display: \"flex\" }}>\n          <button className=\"theme-btn\" onClick={toggleTheme}>\n            <i\n              className={` ${\n                theme === \"theme-light\" ? \"far fa-moon\" : \"far fa-lightbulb\"\n              } `}\n            />\n          </button>\n          <SignOut />\n        </div>\n      </header>\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>\n        Sign in with Google\n      </button>\n    </>\n  );\n}\n\n// Sign out function\nfunction SignOut() {\n  return (\n    auth.currentUser && (\n      <button className=\"sign-out\" onClick={() => auth.signOut()}>\n        <i className=\"fa fa-sign-out-alt\" />\n      </button>\n    )\n  );\n}\n\n// ChatRoom\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef.orderBy(\"createdAt\").limit(25);\n\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n\n  const [formValue, setFormValue] = useState(\"\");\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n    });\n\n    setFormValue(\"\");\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <>\n      <div className=\"main-con\">\n        {/* <Blank /> */}\n        <main>\n          {messages &&\n            messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n\n          <span ref={dummy}></span>\n        </main>\n      </div>\n\n      <div className=\"form-con\">\n        <form onSubmit={sendMessage}>\n          <input\n            value={formValue}\n            onChange={(e) => setFormValue(e.target.value)}\n            placeholder=\"Say something\"\n          />\n\n          <button className=\"send-btn\" type=\"submit\" disabled={!formValue}>\n            <i className=\"fa fa-paper-plane\" />\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n\n// ChatMessage Component\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n\n  return (\n    <>\n      <div className={`message ${messageClass}`}>\n        <img\n          src={\n            photoURL || \"https://api.adorable.io/avatars/23/abott@adorable.png\"\n          }\n        />\n        <p>{text}</p>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}